package kr.happyjob.study.accounting.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.accounting.model.AccTitleModel;
import kr.happyjob.study.accounting.service.AccTitleService;
import kr.happyjob.study.system.model.DeptMgmtModel;

@Controller
@RequestMapping("/accounting/")
public class AccTitleController {

	@Autowired
	AccTitleService accTitleService;
	
	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();
	
	@RequestMapping("AccTitle.do")
	public String deptManagement(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".AccTitle");
		logger.info("   - paramMap : " + paramMap);
		String loginID = (String) session.getAttribute("loginId");
		paramMap.put("loginID", loginID);
		System.out.println(loginID);
//		paramMap.put("writer", loginID);		
		model.addAttribute("loginId", loginID);
		logger.info("+ End " + className + ".AccTitle");

		return "accounting/accTitle";		
	}
	
	 //리스트 출력
	@RequestMapping("accTitleList.do")		
	public String accTitleList(Model model, @RequestParam Map<String, Object> paramMap, 
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("   - paramMap : " + paramMap);
		
		int currentPage = Integer.parseInt((String) paramMap.get("currentPage")); // 현재페이지
	    int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
	    int pageIndex = (currentPage - 1) * pageSize;
	    
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		// 공지사항 목록 조회
		List<AccTitleModel> accTitleList = accTitleService.accTitleList(paramMap);	
		model.addAttribute("accTitleList", accTitleList);
		
		// 목록 수 추출해서 보내기
		int totalCnt = accTitleService.totalCnt(paramMap);		
		model.addAttribute("totalCnt", totalCnt);
		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPage", currentPage);
		
	    return "accounting/accTitleList";
	}	
	
	@RequestMapping("selectComCombo.do")
	@ResponseBody
	public Map<String, Object> selectComCombo (Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".selectComCombo");
		logger.info("   - paramMap : " + paramMap);

		String ComType = (String) paramMap.get("comtype");
			
		List<AccTitleModel> accTitleModel = new ArrayList<>();
		
		logger.info("   - ComType : " + ComType);
		
		if("acc".equals(ComType)) {
			// 공통 콤보 조회 계정 상세
			accTitleModel = accTitleService.selectacclargelist(paramMap);
		} else if("accd".equals(ComType)) {
			// 공통 콤보 조회 계정 상세
			accTitleModel = accTitleService.selectaccsamalllist(paramMap);
		} 
				
		Map<String, Object> resultMap = new HashMap<String, Object>();

		resultMap.put("list", accTitleModel);
		
		logger.info("+ End " + className + ".selectComCombo");
		
		return resultMap;
	}
	
	//단건조회
			@RequestMapping("selectAccTitle.do")
			@ResponseBody
			public Map<String, Object> selectAccTitle(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
					HttpServletResponse response, HttpSession session) throws Exception {
				
				logger.info("+ Start " + className + ".selectAccTitle");
				logger.info("   - paramMap : " + paramMap);
				
				AccTitleModel AccTitleModel= accTitleService.selectAccTitle(paramMap);
						
				Map<String, Object> resultMap = new HashMap<String, Object>();
				resultMap.put("AccTitleModel", AccTitleModel);
				
				logger.info("+ Stop " + className + ".selectAccTitle");
				
				return resultMap;
			}	
			

			@RequestMapping("saveAccTitle.do")
			@ResponseBody
			public Map<String, Object> saveAccTitle(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
					HttpServletResponse response, HttpSession session) throws Exception {
				
				logger.info("+ Start " + className + ".saveAccTitle");
				logger.info("   - paramMap : " + paramMap);
				
				String sucessresult = "SUCCESS";
				String failresult = "FAIL";
				
				String action = (String) paramMap.get("action");
				
				int sqlresult = 0;
				
				if("U".equals(action)) {  // 수정
					sqlresult = accTitleService.updateAccTitle(paramMap);
					
				}else if("I".equals(action)){
					sqlresult = accTitleService.insertdtlAccTitle(paramMap);
				}
				
				Map<String, Object> returnvalue = new HashMap<String, Object>();
				
				if(sqlresult == -1) {
					returnvalue.put("result", failresult);
				} else {
					returnvalue.put("result", sucessresult);
				}
				
				
				logger.info("+ Stop " + className + ".saveAccTitle");
				
				return returnvalue;
			}		
			
}
